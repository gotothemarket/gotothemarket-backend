server:
  port: 8080

spring:
  application:
    name: gotothemarket-app

  datasource:
    # Docker Compose에서 환경변수로 설정되므로 기본값만 명시
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres-dev:5432/gotothemarket}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:0118}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 15
      minimum-idle: 8
      connection-timeout: 20000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000 # 커넥션 누수 감지 추가

  # Redis 설정 추가
  data:
    redis:
      host: redis
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 12
          max-idle: 12
          min-idle: 2
          max-wait: 1000ms   # 최대 대기 시간 추가
        shutdown-timeout: 100ms

  # 캐시 설정 추가
  cache:
    type: redis
    redis:
      time-to-live: 180000
      cache-null-values: false

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      # Docker Compose에서 환경변수로 override됨 (update)
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:validate}
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.PostgreSQLDialect

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    # CORS 관련 설정
    csrf:
      enabled: false
  api-docs:
    path: /v3/api-docs

logging:
  level:
    root: WARN
    com.example.gotothemarket: INFO
    org.springframework.web: WARN
    org.hibernate: WARN
    org.springframework.cache: WARN
    org.springframework.data.jpa.repository.query: WARN
    org.hibernate.internal.AbstractSharedSessionContract: ERROR
    org.hibernate.resource.transaction.backend.jdbc: ERROR
    org.hibernate.orm.sql.ast: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

aws:
  access-key: ${AWS_ACCESS_KEY_ID}
  secret-key: ${AWS_SECRET_ACCESS_KEY}
  region: ${AWS_REGION}
  s3:
    bucket: ${AWS_S3_BUCKET}

cohere:
  api-key: ${COHERE_API_KEY}
  model-id: ${COHERE_CLASSIFY_MODEL_ID}